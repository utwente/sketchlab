package nl.javalon.sketchlab.resource;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.AllArgsConstructor;
import nl.javalon.sketchlab.config.ApiConfig;
import nl.javalon.sketchlab.dao.ChapterGroupDetailsDao;
import nl.javalon.sketchlab.dto.chapter.ChapterGroupCreateDto;
import nl.javalon.sketchlab.entity.tables.pojos.ChapterGroup;
import nl.javalon.sketchlab.exception.NoSuchEntityException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

/**
 * Handles management of chapter groups. This is completely teacher-only.
 *
 * @author Melcher Stikkelorum
 */
@SketchlabResource
@RequestMapping(ApiConfig.CHAPTER_GROUP)
@AllArgsConstructor(onConstructor = @__(@Autowired))
@Api(description = "Management resource for chapter groups (teacher only)")
public class ChapterGroupResource {
	private final ChapterGroupDetailsDao chapterGroupDao;

	/**
	 * Retrieves all chapter groups in the system, only the top level objects are returned, no
	 * children or parent objects are fetched.
	 *
	 * @param chapterId The ID of the chapter the chapter groups should belong to.
	 * @return A List of all chapter groups belonging to the given chapter.
	 */
	@ApiOperation("Get all chapter groups for a given chapter")
	@GetMapping()
	public List<ChapterGroup> getAll(@PathVariable int chapterId) {
		return chapterGroupDao.fetchByChapterId(chapterId);
	}

	/**
	 * Retrieves a specific chapter group in the system, only the top level object is returned, no
	 * children or parent objects are fetched.
	 *
	 * @param chapterGroupId The ID of the chapter group.
	 * @param chapterId      The ID of the chapter the chapter group belongs to.
	 * @return The chapter group to be retrieved.
	 * @throws NoSuchEntityException When the chapter group does not exist.
	 */
	@ApiOperation("Get one specific chapter group")
	@GetMapping("/{chapterGroupId}")
	public ChapterGroup get(@PathVariable int chapterGroupId, @PathVariable int chapterId) {
		return NoSuchEntityException.checkNull(
				chapterGroupDao.findByChapterGroupIdAndChapterId(chapterGroupId, chapterId),
				"No such chapter group");
	}

	/**
	 * Creates a new chapter group and returns the generated object.
	 *
	 * @param chapterId       The ID of the chapter the chapter group belongs to.
	 * @param chapterGroupDto The parameters for the chapter group to be created.
	 * @return The created chapter group.
	 */
	@ApiOperation("Create a new chapter group. The new chapter group is returned w/ new, " +
			"generated id and its starting date.")
	@PostMapping()
	public ChapterGroup post(
			@PathVariable int chapterId,
			@RequestBody @Valid ChapterGroupCreateDto chapterGroupDto) {
		ChapterGroup chapterGroup = new ChapterGroup();
		chapterGroup.setChapterId(chapterId);
		chapterGroup.setName(chapterGroupDto.getName());
		int chapterGroupId = chapterGroupDao.insertAndGetId(chapterGroup);

		// The chapter group has to be retrieved from the database. This is because several fields
		// are generated by the database.
		return chapterGroupDao.findByChapterGroupIdAndChapterId(chapterGroupId, chapterId);
	}

	/**
	 * Updates a specific chapter group.
	 *
	 * @param chapterId       The ID of the chapter this chapter group belongs to.
	 * @param chapterGroupId  The ID of the chapter group itself.
	 * @param chapterGroupDto The parameters of the chapter group to be updated.
	 * @return The updated chapter group.
	 * @throws NoSuchEntityException When the chapter group does not exist.
	 */
	@ApiOperation("Edit a chapter group.")
	@PutMapping("/{chapterGroupId}")
	public ChapterGroup put(
			@PathVariable int chapterId,
			@PathVariable int chapterGroupId,
			@RequestBody @Valid ChapterGroupCreateDto chapterGroupDto) {
		ChapterGroup chapterGroup = NoSuchEntityException.checkNull(
				chapterGroupDao.findByChapterGroupIdAndChapterId(chapterGroupId, chapterId),
				"No such chapter group."
		);

		chapterGroup.setName(chapterGroupDto.getName());

		chapterGroupDao.update(chapterGroup);
		return chapterGroup;
	}

	/**
	 * Deletes a chapter group by the given ID.
	 *
	 * @param chapterGroupId The ID of the chapter group to be deleted.
	 */
	@ApiOperation("Delete a chapter group and all related data. This is destructive.")
	@DeleteMapping("/{chapterGroupId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void delete(@PathVariable int chapterGroupId) {
		chapterGroupDao.deleteById(chapterGroupId);
	}
}
